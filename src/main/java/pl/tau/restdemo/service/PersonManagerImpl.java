package pl.tau.restdemo.service;

import org.springframework.stereotype.Component;
import pl.tau.restdemo.domain.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import pl.tau.restdemo.logging.Log;

/**
 * Created by tp on 24.04.17.
 */
@Component
public class PersonManagerImpl implements PersonManager {

    private Connection connection;

    @Log
    private Logger LOG;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private final PreparedStatement addPersonStmt;
    private final PreparedStatement getPersonStmt;
    private final PreparedStatement deletePersonStmt;
    private final PreparedStatement getAllPersonsStmt;

    private static final String INSERT = "INSERT INTO Person (name, yob) VALUES (?, ?)";
    private static final String DELETE = "DELETE FROM Person where id = ?";
    private static final String LIST = "SELECT id, name, yob FROM Person";
    private static final String GET = "SELECT id, name, yob FROM Person where id = ?";

    public PersonManagerImpl() throws SQLException {
        Statement statement;
        connection = DriverManager.getConnection(url);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate("CREATE TABLE Person(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                    + "name varchar(20), yob integer)");
        }

        addPersonStmt = connection.prepareStatement(INSERT);
        deletePersonStmt = connection.prepareStatement(DELETE);
        getAllPersonsStmt = connection.prepareStatement(LIST);
        getPersonStmt = connection.prepareStatement(GET);
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public void deletePerson(Person person) throws SQLException {
        deletePersonStmt.setLong(1, person.getId());
        int deleteResult = deletePersonStmt.executeUpdate();
        System.out.println("Delete result: " + deleteResult);
    }

    @Override
    public void clearPersons() throws SQLException {
        connection.prepareStatement("delete from Person").executeUpdate();
    }

    @Override
    public int addPerson(Person person) {
        int count = 0;
        try {
            addPersonStmt.setString(1, person.getName());
            addPersonStmt.setInt(2, person.getYob());

            count = addPersonStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public Person getPerson(Person person) {
        Person p = new Person();
        try {
            getPersonStmt.setLong(1, person.getId());
            ResultSet rs = getPersonStmt.executeQuery();
            if (rs == null) {
                return null;
            }
            if (rs.getFetchSize() > 1) {
                System.out.println("Expected zero or one row in result set");
            }
            while (rs.next()) {
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return p;
    }

    public List<Person> getAllPersons() {
        List<Person> persons = new ArrayList<Person>();

        try {
            ResultSet rs = getAllPersonsStmt.executeQuery();

            while (rs.next()) {
                Person p = new Person();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
                persons.add(p);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return persons;
    }

}
